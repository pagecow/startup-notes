{"version":3,"sources":["src/Headers/GlobalHeader.js","src/Footers/GlobalFooter.js","src/screens/AllNotes/AllNotes.js","src/screens/Note/Note.js","src/screens/CreateNote/CreateNote.js","src/screens/LoginSignup/LoginSignup.js","src/AppNavigation/AppNavigation.js","src/AppState/AppState.js","App.js","src/assets/images/logo.png"],"names":["GlobalHeader","navigation","setScreenName","AppState","View","style","styles","headerCont","TouchableOpacity","onPress","navigate","Image","logo","source","require","Text","text","name","size","color","StyleSheet","create","flex","flexDirection","width","paddingLeft","paddingRight","justifyContent","alignItems","backgroundColor","shadowColor","shadowOffset","height","shadowOpacity","shadowRadius","elevation","paddingTop","StatusBar","currentHeight","fontFamily","fontSize","GlobalFooter","noteID","setNoteID","allNotes","setAllNotes","setChosenNoteID","screenName","newNoteID","footerCont","a","async","newNote","noteTitle","noteText","AsyncStorage","setItem","currentNotes","localNotes","JSON","stringify","borderTopWidth","borderTopColor","AllNotes","setNote","forceUpdate","useForceUpdate","useIsFocused","useEffect","console","log","handleDelete","noteObj","allNotesCopy","objIndex","findIndex","obj","splice","Platform","OS","screen","siteConstuctionText","body","ScrollView","contentContainerStyle","scrollViewCont","map","e","i","noteCont","deleteButton","Alert","alert","numberOfLines","marginTop","marginBottom","marginLeft","marginRight","padding","borderWidth","borderColor","borderRadius","position","right","top","zIndex","paddingBottom","margin","textAlign","Note","chosenNoteID","note","useState","setNoteTitle","setNoteText","showFooter","setShowFooter","handleUpdate","Keyboard","addListener","KeyboardAvoidingView","behavior","TextInput","placeholder","value","onChangeText","multiline","saveButtonCont","saveButton","saveButtonText","CreateNote","LoginSignup","userID","setUserID","email","setEmail","password","setPassword","showLogin","setShowLogin","headerText","inputs","Stack","createNativeStackNavigator","AppNavigation","NavigationContainer","Navigator","Screen","options","headerShown","props","useFonts","FredokaOne_400Regular","OpenSans_300Light","OpenSans_400Regular","OpenSans_600SemiBold","OpenSans_700Bold","fontsLoaded","getItem","localNoteID","Number","parse","App","registerNNPushToken","module","exports"],"mappings":"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","file":"static/js/app.8fe41cde.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity, Image, StatusBar } from 'react-native';\n\nimport Icon from 'react-native-vector-icons/EvilIcons';\n\nexport default function GlobalHeader({ navigation, AppState }) {\n    const { setScreenName } = AppState;\n\n    return (\n        <View style={styles.headerCont}>\n            <TouchableOpacity onPress={() => { navigation.navigate('AllNotes'); setScreenName('AllNotes'); }}>\n                <Image\n                    style={styles.logo}\n                    source={require('../assets/images/logo.png')}\n                />\n            </TouchableOpacity>\n            \n            <Text style={styles.text}>Startup Notes</Text>\n\n            <Icon name=\"user\" size={35} color=\"#141414\" onPress={() => navigation.navigate('LoginSignup')} />\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    headerCont: {\n        flex: 1,\n        flexDirection: 'row',\n        width: '100%',\n        paddingLeft: '5%',\n        paddingRight: '5%',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        backgroundColor: '#fff',\n        shadowColor: \"#000\",\n        shadowOffset: {\n            width: 0,\n            height: 3,\n        },\n        shadowOpacity: 0.29,\n        shadowRadius: 4.65,\n        elevation: 7,\n        paddingTop: StatusBar.currentHeight,\n    },\n\n    logo: {\n        height:25,\n        width:25\n    },\n    text: {\n        fontFamily: 'FredokaOne_400Regular',\n        fontSize: 15,\n        color: '#141414',\n    }\n});","import React, { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\nimport Icon2 from 'react-native-vector-icons/Ionicons';\n\nexport default function GlobalFooter({ navigation, AppState }) {\n    const { noteID, setNoteID, allNotes, setAllNotes, setChosenNoteID, screenName, setScreenName } = AppState;\n\n    const newNoteID = noteID + 1;\n\n    const handleCreateNote = async () => {\n        const newNote = { noteID: newNoteID, noteTitle: '', noteText: '' };\n\n        await AsyncStorage.setItem('@noteID', `${newNoteID}`);\n        await setChosenNoteID(newNoteID);\n        await setAllNotes((currentNotes) => [newNote, ...currentNotes]);\n        await setNoteID(newNoteID);\n\n        let localNotes = JSON.stringify(allNotes);\n        await AsyncStorage.setItem('@notes', localNotes);\n\n        navigation.navigate('CreateNote');\n        setScreenName('CreateNote');\n    }\n\n    const handleGoHome = async () => {\n        navigation.navigate('AllNotes');\n        setScreenName('AllNotes');\n    }\n\n    return (\n        <View style={styles.footerCont}>\n            <Icon \n                name={screenName === 'AllNotes' ? \"notebook\" : \"notebook-outline\"} \n                size={27} \n                color={screenName === 'AllNotes' ? \"#02394A\" : \"#141414\"} \n                onPress={handleGoHome} />\n            <Icon2 \n                name={screenName === 'CreateNote' ? \"md-create\" : \"md-create-outline\"} \n                size={30} \n                color={screenName === 'CreateNote' ? \"#02394A\" : \"#141414\"} \n                onPress={handleCreateNote}/>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    footerCont: {\n        flex: 1,\n        flexDirection: 'row',\n        width: '100%',\n        justifyContent: 'space-around',\n        alignItems: 'center',\n        borderTopWidth: 0.75,\n        borderTopColor: '#d8d8d8',\n    }\n});","import React, { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity, ScrollView, Alert, Platform } from 'react-native';\nimport { useIsFocused } from '@react-navigation/native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport useForceUpdate from 'use-force-update';\n\nimport GlobalHeader from '../../Headers/GlobalHeader';\nimport GlobalFooter from '../../Footers/GlobalFooter';\n\nimport Icon from 'react-native-vector-icons/Feather';\n\nexport default function AllNotes({ navigation, AppState }) {\n    const { allNotes, setAllNotes, setChosenNoteID, setNote } = AppState;\n\n    const forceUpdate = useForceUpdate();\n    useIsFocused();\n\n    useEffect(() => {\n        console.log(\"useEffect triggered\");\n    }, [allNotes])\n\n    const handlePress = async (noteObj) => {\n        await setChosenNoteID(noteObj.noteID);\n        await setNote(noteObj);\n        navigation.navigate('Note');\n    }\n\n    const confirmAlert = (noteObj) => {\n        Alert.alert(\n            \"Wait! Do you want to delete your note forever?\",\n            \"This cannot be undone!!!\",\n            [\n              {\n                text: \"Cancel\",\n                onPress: () => console.log(\"Cancel Pressed\"),\n                style: \"cancel\"\n              },\n              { text: \"Yes, delete my note forever\", onPress: () => handleDelete(noteObj) }\n            ]\n        );\n    }\n\n    const handleDelete = async (noteObj) => {\n        console.log(\"handleDelete triggered\");\n        let allNotesCopy = allNotes;\n        let objIndex = allNotes.findIndex((obj => obj.noteID == noteObj.noteID));\n\n        await allNotesCopy.splice(objIndex, 1);\n\n        await setAllNotes(allNotesCopy);\n        \n        let localNotes = JSON.stringify(allNotes);\n        await AsyncStorage.setItem('@notes', localNotes);\n\n        forceUpdate();\n    }\n\n    if(Platform.OS === 'web') {\n        return (\n            <View style={styles.screen}>\n                <Text style={styles.siteConstuctionText}>Site is under construction.</Text>\n                <Text style={styles.siteConstuctionText}>You can find the Startup Notes app on the Apple App Store or the Google Play Store.</Text>\n                <Text style={styles.siteConstuctionText}>If you have any questions, please email: tj@nativenotify.com</Text>\n            </View>\n        )\n    } else {\n        return (\n            <View style={styles.screen}>\n                <GlobalHeader navigation={navigation} AppState={AppState} />\n                <View style={styles.body}>\n                    <ScrollView contentContainerStyle={styles.scrollViewCont}>\n                        { allNotes.map((e, i) => {\n                            return (\n                                <View key={i} style={styles.noteCont}>\n                                    <Icon\n                                        style={styles.deleteButton} \n                                        name=\"x-circle\" \n                                        onPress={() => confirmAlert(e)} \n                                    />\n                                    <TouchableOpacity  \n                                        onPress={() => handlePress(e)}\n                                    >\n                                        <Text \n                                            style={styles.noteTitle}\n                                            numberOfLines={1}\n                                        >{e.noteTitle}</Text>\n                                        <Text \n                                            style={styles.noteText} \n                                            numberOfLines={1}\n                                        >{e.noteText}</Text>\n                                    </TouchableOpacity>\n                                    \n                                </View>\n                               \n                            )\n                        }) }\n                    </ScrollView>\n                </View>\n                <GlobalFooter AppState={AppState} navigation={navigation} />\n            </View>\n        );\n    }\n\n    \n}\n\nconst styles = StyleSheet.create({\n    screen: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '#fff'\n    },\n    body: {\n        flex: 8,\n        width: '100%',\n        paddingLeft: '2%',\n        paddingRight: '2%',\n        backgroundColor: '#f4f4f4',\n    },\n\n    noteCont: {\n        marginTop: 0,\n        marginBottom: 15,\n        marginLeft: '0.5%',\n        marginRight: '0.5%',\n        padding: 15,\n        backgroundColor: '#fff',\n        borderWidth: 0.75,\n        borderColor: '#d8d8d8',\n        shadowColor: \"#000\",\n        shadowOffset: {\n            width: 0,\n            height: 1,\n        },\n        shadowOpacity: 0.20,\n        shadowRadius: 1.41,\n        elevation: 2,\n        borderRadius: 8,\n    },\n    deleteButton: {\n        position: 'absolute',\n        right: 8,\n        top: 8,\n        zIndex: 10,\n        fontSize: 14,\n        color: '#990000'\n    },\n    noteTitle: {\n        width: '90%',\n        fontFamily: 'OpenSans_600SemiBold',\n        marginBottom: 5,\n        fontSize: 14,\n    },\n    noteText: {\n        fontFamily: 'OpenSans_300Light',\n        marginTop: 2,\n        fontSize: 14,\n    },\n    scrollViewCont: {\n        paddingTop: 20,\n        paddingBottom: 200\n    },\n    siteConstuctionText: {\n        fontSize: 20,\n        margin: 20,\n        textAlign: 'center',\n    }\n});","import React, { useState, useEffect } from 'react';\nimport { StyleSheet, View, Keyboard, ScrollView, TextInput, KeyboardAvoidingView, Platform } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nimport GlobalFooter from '../../Footers/GlobalFooter';\n\nexport default function Note({ navigation, AppState }) {\n    const { chosenNoteID, note, allNotes, setAllNotes } = AppState;\n    const [noteTitle, setNoteTitle] = useState(note.noteTitle);\n    const [noteText, setNoteText] = useState(note.noteText);\n    const [showFooter, setShowFooter] = useState(true);\n\n    let allNotesCopy = allNotes;\n\n    let objIndex = allNotes.findIndex((obj => obj.noteID == chosenNoteID));\n    console.log(\"Chosen note object: \", allNotes[objIndex]);\n\n    useEffect(() => {\n        handleUpdate();\n\n        Keyboard.addListener(\"keyboardDidShow\", () => setShowFooter(false));\n        Keyboard.addListener(\"keyboardDidHide\", () => setShowFooter(true));\n    })\n\n    const handleUpdate = async () => {\n        console.log(\"Before update: \", allNotes[objIndex]);\n        allNotesCopy[objIndex].noteTitle = noteTitle;\n        allNotesCopy[objIndex].noteText = noteText;\n        console.log(\"After update: \", allNotesCopy[objIndex]);\n\n        await setAllNotes(allNotesCopy);\n\n        let localNotes = JSON.stringify(allNotes);\n        await AsyncStorage.setItem('@notes', localNotes);\n    }\n\n    return (\n        <KeyboardAvoidingView \n            style={styles.screen}\n            behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n        >\n            <View style={styles.body}>\n                <ScrollView contentContainerStyle={styles.scrollViewCont}>\n                    <TextInput \n                        style={styles.noteTitle}\n                        placeholder={'Note Title'}\n                        value={noteTitle}\n                        onChangeText={setNoteTitle}\n                        multiline={true}\n                    />\n                    <TextInput \n                        style={styles.noteText}\n                        placeholder={'Note Text'}\n                        value={noteText}\n                        onChangeText={setNoteText}\n                        multiline={true}\n                   />\n                </ScrollView>\n            </View>\n            {showFooter ? <GlobalFooter AppState={AppState} navigation={navigation} /> : null}\n        </KeyboardAvoidingView>\n    );\n}\n\nconst styles = StyleSheet.create({\n    screen: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '#fff'\n    },\n    body: {\n        flex: 9,\n        width: '100%',\n        paddingTop: '6%',\n        paddingLeft: '6%',\n        paddingRight: '6%',\n    },\n\n    noteTitle: {\n        fontFamily: 'OpenSans_700Bold',\n        fontSize: 24,\n    },\n    noteText: {\n        fontFamily: 'OpenSans_400Regular',\n        marginTop: 10,\n        fontSize: 16,\n        color: '#000',\n    },\n    scrollViewCont: {\n        paddingTop: 20,\n        paddingBottom: 20,\n    },\n    saveButtonCont: {\n        flex: 1,\n        width: '100%',\n        paddingLeft: '6%',\n        paddingRight: '6%',\n        marginTop: 5\n    },\n    saveButton: {\n        backgroundColor: '#02394A',\n        padding: 15,\n        alignItems: 'center',\n        borderRadius: 8,\n        shadowColor: \"#000\",\n        shadowOffset: {\n            width: 0,\n            height: 2,\n        },\n        shadowOpacity: 0.23,\n        shadowRadius: 2.62,\n        elevation: 4,\n    },\n    saveButtonText: {\n        color: '#fff',\n        fontFamily: 'FredokaOne_400Regular',\n        fontSize: 16\n    }\n});","import React, { useState, useEffect } from 'react';\nimport { StyleSheet, View, Keyboard, ScrollView, TextInput, KeyboardAvoidingView, Platform } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nimport GlobalFooter from '../../Footers/GlobalFooter';\n\nexport default function CreateNote({ navigation, AppState }) {\n    const { chosenNoteID, allNotes, setAllNotes } = AppState;\n    const [noteTitle, setNoteTitle] = useState('');\n    const [noteText, setNoteText] = useState('');\n    const [showFooter, setShowFooter] = useState(true);\n\n    let allNotesCopy = allNotes;\n\n    let objIndex = allNotes.findIndex((obj => obj.noteID == chosenNoteID));\n    console.log(\"Chosen note object: \", allNotes[objIndex]);\n\n    useEffect(() => {\n        handleUpdate();\n\n        Keyboard.addListener(\"keyboardDidShow\", () => setShowFooter(false));\n        Keyboard.addListener(\"keyboardDidHide\", () => setShowFooter(true));\n    })\n\n    const handleUpdate = async () => {\n        console.log(\"Before update: \", allNotes[objIndex]);\n        allNotesCopy[objIndex].noteTitle = noteTitle;\n        allNotesCopy[objIndex].noteText = noteText;\n        console.log(\"After update: \", allNotesCopy[objIndex]);\n\n        await setAllNotes(allNotesCopy);\n\n        let localNotes = JSON.stringify(allNotes);\n        await AsyncStorage.setItem('@notes', localNotes);\n    }\n\n    return (\n        <KeyboardAvoidingView \n            style={styles.screen}\n            behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n        >\n            <View style={styles.body}>\n                <ScrollView contentContainerStyle={styles.scrollViewCont}>\n                    <TextInput \n                        style={styles.noteTitle}\n                        placeholder={'Note Title'}\n                        value={noteTitle}\n                        onChangeText={setNoteTitle}\n                        multiline={true}\n                    />\n                    <TextInput \n                        style={styles.noteText}\n                        placeholder={'Note Text'}\n                        value={noteText}\n                        onChangeText={setNoteText}\n                        multiline={true}\n                   />\n                </ScrollView>\n            </View>\n            {showFooter ? <GlobalFooter AppState={AppState} navigation={navigation} /> : null}\n        </KeyboardAvoidingView>\n    );\n}\n\nconst styles = StyleSheet.create({\n    screen: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '#fff'\n    },\n    body: {\n        flex: 9,\n        width: '100%',\n        paddingTop: '6%',\n        paddingLeft: '6%',\n        paddingRight: '6%',\n    },\n\n    noteTitle: {\n        fontFamily: 'OpenSans_700Bold',\n        fontSize: 24\n    },\n    noteText: {\n        fontFamily: 'OpenSans_400Regular',\n        marginTop: 20,\n        fontSize: 16,\n        color: '#000'\n    },\n    scrollViewCont: {\n        paddingTop: 20,\n        paddingBottom: 20,\n    },\n    saveButtonCont: {\n        flex: 1,\n        width: '100%',\n        paddingLeft: '6%',\n        paddingRight: '6%',\n        marginTop: 5\n    },\n    saveButton: {\n        backgroundColor: '#02394A',\n        padding: 15,\n        alignItems: 'center',\n        borderRadius: 8,\n        shadowColor: \"#000\",\n        shadowOffset: {\n            width: 0,\n            height: 2,\n        },\n        shadowOpacity: 0.23,\n        shadowRadius: 2.62,\n        elevation: 4,\n    },\n    saveButtonText: {\n        color: '#fff',\n        fontFamily: 'FredokaOne_400Regular',\n        fontSize: 16\n    }\n});","import React, { useState, useEffect } from 'react';\nimport { StyleSheet, View, Keyboard, Text, TextInput, KeyboardAvoidingView, TouchableOpacity, Platform } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nimport GlobalHeader from '../../Headers/GlobalHeader';\n\nexport default function LoginSignup({ navigation, AppState }) {\n    const { userID, setUserID } = AppState;\n\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [showLogin, setShowLogin] = useState(false);\n\n    const handleLogin = async () => {\n        console.log(\"Before update: \", allNotes[objIndex]);\n        allNotesCopy[objIndex].email = email;\n        allNotesCopy[objIndex].password = password;\n        console.log(\"After update: \", allNotesCopy[objIndex]);\n\n        await setAllNotes(allNotesCopy);\n\n        let localNotes = JSON.stringify(allNotes);\n        await AsyncStorage.setItem('@notes', localNotes);\n    }\n\n    return (\n        <KeyboardAvoidingView \n            style={styles.screen}\n            behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n        >\n            <GlobalHeader navigation={navigation} AppState={AppState} />\n            <View style={styles.body}>\n                {showLogin ? <Text style={styles.headerText}></Text> : <Text style={styles.headerText}>Sign up to automatically save your notes to the cloud. Automatically sync and access your files across devices.</Text>}\n                <TextInput \n                    style={styles.inputs}\n                    placeholder={'Email'}\n                    value={email}\n                    onChangeText={setEmail}\n                    multiline={true}\n                />\n                <TextInput \n                    style={styles.inputs}\n                    placeholder={'Password'}\n                    value={password}\n                    onChangeText={setPassword}\n                    multiline={true}\n                />\n                <TouchableOpacity style={styles.saveButton}>\n                    <Text style={styles.saveButtonText}>{showLogin ? 'Login' : 'Sign Up'}</Text>\n                </TouchableOpacity>\n                <TouchableOpacity onPress={() => setShowLogin(!showLogin)}>\n                    <Text style={styles.text}>{showLogin ? \"Don't have an account yet? Tap here to Sign up.\" : \"Already have an account? Tap here to Log In.\"}</Text>\n                </TouchableOpacity>\n            </View>\n        </KeyboardAvoidingView>\n    );\n}\n\nconst styles = StyleSheet.create({\n    screen: {\n        flex: 1,\n        alignItems: 'center',\n        backgroundColor: '#fff'\n    },\n    body: {\n        flex: 9,\n        width: '100%',\n        paddingLeft: '6%',\n        paddingRight: '6%',\n        alignItems: 'center',\n        backgroundColor: '#f4f4f4',\n    },\n\n    headerText: {\n        height: '20%',\n        fontFamily: 'OpenSans_700Bold',\n        fontSize: 18,\n        marginTop: 30,\n        textAlign: 'center'\n    },\n    inputs: {\n        width: '100%',\n        fontFamily: 'OpenSans_700Bold',\n        fontSize: 14,\n        padding: 10,\n        backgroundColor: '#fff',\n        borderWidth: 0.75,\n        borderColor: '#d8d8d8',\n        shadowColor: \"#000\",\n        shadowOffset: {\n            width: 0,\n            height: 1,\n        },\n        shadowOpacity: 0.20,\n        shadowRadius: 1.41,\n        elevation: 2,\n        borderRadius: 8,\n        marginBottom: 10\n    },\n    password: {\n        fontFamily: 'OpenSans_400Regular',\n        marginTop: 10,\n        fontSize: 16,\n        color: '#000'\n    },\n    saveButton: {\n        width: '100%',\n        backgroundColor: '#02394A',\n        marginTop: 5,\n        marginBottom: 15,\n        padding: 15,\n        alignItems: 'center',\n        borderRadius: 8,\n        shadowColor: \"#000\",\n        shadowOffset: {\n            width: 0,\n            height: 2,\n        },\n        shadowOpacity: 0.23,\n        shadowRadius: 2.62,\n        elevation: 4,\n    },\n    saveButtonText: {\n        color: '#fff',\n        fontFamily: 'FredokaOne_400Regular',\n        fontSize: 16\n    },\n    text: {\n        fontFamily: 'OpenSans_400Regular',\n    }\n});","import * as React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nimport AllNotes from '../screens/AllNotes/AllNotes';\nimport Note from '../screens/Note/Note';\nimport CreateNote from '../screens/CreateNote/CreateNote';\nimport LoginSignup from '../screens/LoginSignup/LoginSignup';\n\nconst Stack = createNativeStackNavigator();\n\nexport default function AppNavigation({ AppState }) {\n    return (\n        <NavigationContainer>\n          <Stack.Navigator>\n\n            <Stack.Screen name=\"AllNotes\" options={{ headerShown: false }}>\n                {props => <AllNotes {...props} AppState={AppState} />}\n            </Stack.Screen>\n            <Stack.Screen name=\"Note\" options={{ headerShown: false }}>\n                {props => <Note {...props} AppState={AppState} />}\n            </Stack.Screen>\n            <Stack.Screen name=\"CreateNote\" options={{ headerShown: false }}>\n                {props => <CreateNote {...props} AppState={AppState} />}\n            </Stack.Screen>\n\n            <Stack.Screen name=\"LoginSignup\" options={{ headerShown: false }}>\n                {props => <LoginSignup {...props} AppState={AppState} />}\n            </Stack.Screen>\n\n          </Stack.Navigator>\n        </NavigationContainer>\n      );\n}","import React, { useState, useEffect } from 'react';\nimport AppLoading from 'expo-app-loading';\nimport { useFonts, FredokaOne_400Regular } from '@expo-google-fonts/fredoka-one';\nimport { OpenSans_300Light, OpenSans_400Regular, OpenSans_600SemiBold, OpenSans_700Bold } from '@expo-google-fonts/open-sans';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nimport AppNavigation from '../AppNavigation/AppNavigation';\n\nexport default function AppState() {\n    const [userID, setUserID] = useState(0);\n    const [noteID, setNoteID] = useState(0);\n    const [allNotes, setAllNotes] = useState([]);\n    const [note, setNote] = useState({});\n    const [chosenNoteID, setChosenNoteID] = useState(0);\n    const [screenName, setScreenName] = useState('AllNotes');\n\n    const AppState = {\n        userID, setUserID,\n        noteID, setNoteID,\n        allNotes, setAllNotes,\n        note, setNote,\n        chosenNoteID, setChosenNoteID,\n        screenName, setScreenName\n    };\n\n    let [fontsLoaded] = useFonts({\n        FredokaOne_400Regular, OpenSans_300Light, OpenSans_400Regular, OpenSans_600SemiBold, OpenSans_700Bold\n    });\n\n    useEffect(async () => {\n        try {\n            const localNoteID = await AsyncStorage.getItem('@noteID');\n            console.log(\"localNoteID: \", localNoteID);\n            if(localNoteID !== null) {\n                setNoteID(Number(localNoteID));\n            } else {\n                await AsyncStorage.setItem('@noteID', '0');\n            }\n\n            const localNotes = await AsyncStorage.getItem('@notes');\n            console.log(\"localNotes: \", localNotes);\n            if(localNotes !== null) {\n                setAllNotes(JSON.parse(localNotes));\n            }\n        } catch(e) {\n            console.log(e);\n        }\n    }, []);\n\n    if (!fontsLoaded) {\n        return <AppLoading />;\n    } else {\n        return <AppNavigation AppState={AppState} />\n    }\n}","import AppState from './src/AppState/AppState';\nimport registerNNPushToken from 'native-notify';\n\nexport default function App() {\n  registerNNPushToken(2322, 'm2Z4KJEpmg7R91AkqQpCru');\n  \n  return <AppState />;\n}","module.exports = __webpack_public_path__ + \"static/media/logo.b7b2940b.png\";"],"sourceRoot":""}